The code book

Experimental design and background:

This study came from the University of California Irvine's Machine Learning department.  A description of the experiement can be
found here:
http://archive.ics.uci.edu/ml/datasets/Human+Activity+Recognition+Using+Smartphones

The data itself came from experiments that were carried out by SmartLabs in Italy with a group of 30 volunteers aged 19-48 years.
Each person performed six activities (WALKING, WALKING_UPSTAIRS, WALKING_DOWNSTAIRS, SITTING, STANDING, LAYING) wearing a
smartphone (Samsung Galaxy S II) on the waist. Using its embedded accelerometer and gyroscope, SmartLabs captured 3-axial linear
acceleration measures and 3-axial angular velocity measures at a constant rate of 50Hz. The obtained dataset was randomly
partitioned into two sets, training and test, where 70% of the volunteers was selected for generating the training data and 30%
for generating the test data.

Raw data:
The raw data can be dowloaded here:
https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip


The dataset includes the following files which were used:
Labels and descriptions:
  - 'README.txt'
  - 'features_info.txt': Shows information about the variables used on the feature vector.
  - 'features.txt': List of all features.
  - 'activity_labels.txt': Links the class labels with their activity name.
The training data set:
  - 'train/X_train.txt': Each row identifies a series of measurements for a given subject and activity.  There are 561 columns
                         of data that were measured.  The columns are described in the 'features.txt' file.
  - 'train/y_train.txt': Each row identifies the activity that was being performed.  Its range is from 1 to 6.  The numbers
                         are linked to labels using the file 'activity_labels.txt'
  - 'train/subject_train.txt': Each row identifies the subject who performed the activity. Its range is from 1 to 30. 
The test data set is structured the same as the training data set:
  - 'test/X_test.txt'
  - 'test/y_test.txt'
  - 'test/subject_test.txt'

The dataset also includes the following directories which were ignored:
- train/Inertial Signals/
- test/Inertial Signals/



The sensor signals (accelerometer and gyroscope) were pre-processed by applying noise filters and then sampled in fixed-width
sliding windows of 2.56 sec and 50% overlap (128 readings/window). The sensor acceleration signal, which has gravitational and
body motion components, was separated using a Butterworth low-pass filter into body acceleration and gravity. The gravitational
force is assumed to have only low frequency components, therefore a filter with 0.3 Hz cutoff frequency was used. From each
window, a vector of features was obtained by calculating variables from the time and frequency domain. See 'features_info.txt'
for more details.
The features selected for this database come from the accelerometer and gyroscope 3-axial raw signals tAcc-XYZ and tGyro-XYZ. These time domain signals (prefix 't' to denote time) were captured at a constant rate of 50 Hz. Then they were filtered using a median filter and a 3rd order low pass Butterworth filter with a corner frequency of 20 Hz to remove noise. Similarly, the acceleration signal was then separated into body and gravity acceleration signals (tBodyAcc-XYZ and tGravityAcc-XYZ) using another low pass Butterworth filter with a corner frequency of 0.3 Hz. 

Subsequently, the body linear acceleration and angular velocity were derived in time to obtain Jerk signals (tBodyAccJerk-XYZ and tBodyGyroJerk-XYZ). Also the magnitude of these three-dimensional signals were calculated using the Euclidean norm (tBodyAccMag, tGravityAccMag, tBodyAccJerkMag, tBodyGyroMag, tBodyGyroJerkMag). 

Finally a Fast Fourier Transform (FFT) was applied to some of these signals producing fBodyAcc-XYZ, fBodyAccJerk-XYZ, fBodyGyro-XYZ, fBodyAccJerkMag, fBodyGyroMag, fBodyGyroJerkMag. (Note the 'f' to indicate frequency domain signals). 

These signals were used to estimate variables of the feature vector for each pattern:  
'-XYZ' is used to denote 3-axial signals in the X, Y and Z directions.
tBodyAcc-XYZ
tGravityAcc-XYZ
tBodyAccJerk-XYZ
tBodyGyro-XYZ
tBodyGyroJerk-XYZ
tBodyAccMag
tGravityAccMag
tBodyAccJerkMag
tBodyGyroMag
tBodyGyroJerkMag
fBodyAcc-XYZ
fBodyAccJerk-XYZ
fBodyGyro-XYZ
fBodyAccMag
fBodyAccJerkMag
fBodyGyroMag
fBodyGyroJerkMag

The set of variables that were estimated from these signals are: 

mean(): Mean value
std(): Standard deviation
mad(): Median absolute deviation 
max(): Largest value in array
min(): Smallest value in array
sma(): Signal magnitude area
energy(): Energy measure. Sum of the squares divided by the number of values. 
iqr(): Interquartile range 
entropy(): Signal entropy
arCoeff(): Autorregresion coefficients with Burg order equal to 4
correlation(): correlation coefficient between two signals
maxInds(): index of the frequency component with largest magnitude
meanFreq(): Weighted average of the frequency components to obtain a mean frequency
skewness(): skewness of the frequency domain signal 
kurtosis(): kurtosis of the frequency domain signal 
bandsEnergy(): Energy of a frequency interval within the 64 bins of the FFT of each window.
angle(): Angle between to vectors.

Additional vectors obtained by averaging the signals in a signal window sample. These are used on the angle() variable:

gravityMean
tBodyAccMean
tBodyAccJerkMean
tBodyGyroMean
tBodyGyroJerkMean

The complete list of variables of each feature vector is available in 'features.txt'

Processed data:

as code book submitted to GitHub that modifies and updates the codebooks available to you with the data to indicate all the
variables and summaries you calculated, along with units, and any other relevant information?

In order to process the data, I completed 5 steps.
describes each variable and its units.
Step 1:  Combine the test and training data sets.
Step 2:  Extract only the columns with mean and standard deviation
Step 3:  Rename the activities with their descriptive names
Step 4:  Rename the variables with desciptive, tidy names
  Lower camel case
  dataLabels.csv
  library(reshape2) and melt function
  
Step 5:  Summarize the data to find the average of each variable by subject and activity

  library(dplyr) and group_by and summarize functions
  summary choices you made

